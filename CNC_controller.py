import os, sys
import serial
import time
import threading

import numpy as np
import matplotlib.pyplot as plt
import pickle


def gcode_sender_th(self):
    
    self.keep_running = True
    try:
        while self.keep_running:
            while self.paused and self.keep_running:
                self.pause_cond.acquire()
##                self.pause_cond.wait()

                
            if len(self.gcode_buffer) > 0:
                # Send G-Code
                to_send = self.gcode_buffer.pop(0)

                to_send = to_send.strip() # Strip all EOL characters for streaming
                if (not to_send.isspace() and len(to_send) > 0) :
                    if self.verbose:
                        print('Sending: "{}"'.format(to_send), end=' ')
                    
                    self.serial.write( (to_send + '\n').encode() ) # Send g-code block
                    grbl_out = self.serial.readline() # Wait for response with carriage return

                    if 'X' in to_send and 'Y' in to_send:
                        args_v = to_send.split()

                        pen_pos = [None, None]
                        for a in args_v:
                            if len(a) > 2 and a[0] == 'X':
                                pen_pos[0] = float(a[1:])
                            elif len(a) > 2 and a[0] == 'Y':
                                pen_pos[1] = float(a[1:])

                        if pen_pos[0] is not None and pen_pos[1] is not None:
                            self.pen_pos = np.array(pen_pos)
                        
                    if self.verbose:
                        print('CNC resp: "{}"'.format(grbl_out))

            else:
                self.pause()

    except Exception as e:
        print(' - ERROR: ', e, 'The connection will be terminated', file=sys.stderr)


    self.keep_running = False
    self.serial.close()
    
    if self.verbose:
        print(' Thread Finished')
        
    return None



class CNC_controller:
    def __init__(self, serial_port='/dev/ttyUSB0', baudrate=115200, move_speed=1000, paper_size=(210, 297), coord_transform=None, verbose=True):
        self.serial_port  = serial_port
        self.baudrate     = baudrate
        self.move_speed   = move_speed
        self.verbose      = verbose

        self.th              = None
        self.keep_running    = False
        self.paused          = False
        self.pause_cond      = threading.Condition( threading.Lock() )
        self.paper_size      = paper_size
        self.coord_transform = None if coord_transform is None else coord_transform.upper()

        self.pen_pos         = np.array([0,0])

        if self.coord_transform not in ['UR', 'BL', None]:
            raise Exception(' - ERROR: coord_transform must be "paper" or None".')


        self.gcode_buffer = []
        
        return None


    def _open_serial(self):
        
        # Connecting
        if self.verbose:
            print(' - Opening Serial Port: {} @ {}'.format(self.serial_port, self.baudrate) )

        self.serial = serial.Serial(self.serial_port, self.baudrate)
        # Sending wakeup
        self.serial.write(b'\n\n') # Hit enter a few times to wake the CNC
        time.sleep(2)   #  Wait for Printrbot to initialize
        self.serial.flushInput()  # Flush startup text in serial input

        if self.verbose:
            print(' Connected to CNC !!!')
            
        return None

    def connect(self):
        """ Connects to the CNC by the Serial port. """

        if self.keep_running:
            print(' - WARNING, you can not reconnect while the connection is active.', file=sys.stderr)
            return None


        self._open_serial()
        
        self.clear_buffer()
        self.send_config()
        self.send_go_home()
        
        self.th = threading.Thread(target=gcode_sender_th,  args=(self,))
        self.th.start()
        return None


    def get_pen_pos(self):
        return self._cnc2plot_transform( self.pen_pos )


    def close(self):
        """ Close the connection """
        self.clear_buffer()
        self.send_eop()

        # Wait for eop exceution
        time.sleep(0.5)
        
        self.keep_running = False

        if self.paused:
            self.resume()
        return None

    def pause(self):
        if not self.paused:
            print('pause')
            self.paused = True
            
        return None


    def resume(self):
        """ Continues after a pause """

        if self.paused:
            print('resume')
            self.paused = False
                        
            # Now release the lock
            self.pause_cond.release()

            # Notify so the thread will wake after lock released
##            self.pause_cond.notify()
            
        return None


    def clear_buffer(self):
        self.gcode_buffer.clear()
        return None

    def send_gcode(self, gcode='S1000 M3'):
        if type(gcode) is str:
            self.gcode_buffer.append(gcode)
            
        else:
            raise Exception(' - ERROR, send_gcode: gcode must be str or a list of str.')

        if self.paused:
            self.resume()
            
        return None


    def send_config(self):
        gcode = 'F{} G90'.format(int(self.move_speed))
        self.send_gcode(gcode=gcode)
        return gcode

    def send_pen_up(self):
        gcode = 'S0 M5'
        self.send_gcode(gcode=gcode)
        return gcode

    def send_pen_down(self):
        gcode = 'S1000 M3'
        self.send_gcode(gcode=gcode)
        return gcode

    def send_goto(self, x=0.0, y=0.0):

        x, y = self._clip( self._plot2cnc_transform( (x,y) ) )
        
        gcode = 'X{:0.02f} Y{:0.02f}'.format(float(x), float(y))
        self.send_gcode(gcode=gcode)
        return gcode


    def send_go_home(self):
        self.send_pen_up()
        self.send_goto(x=0.0, y=0.0)
        return None

    def send_test_paper(self):
        W, H = self.paper_size
        
        self.send_pen_up()
        self.send_goto(x=0, y=0)
        self.send_goto(x=0, y=H)
        self.send_goto(x=W, y=H)
        self.send_goto(x=W, y=0)
        self.send_goto(x=0, y=0)

        return None

    def send_eop(self):
        gcode = 'M02'
        self.send_gcode(gcode=gcode)
        return gcode


    def send_vector(self, p_v=np.array([]), e_v=None,  p_offset='TL'):

        if p_offset is None:
            p_offset = np.array([0.0, 0.0])
        elif type(p_offset) is np.ndarray:
            pass
        elif p_offset == 'TL':
            p_offset = np.array([0.0, self.paper_size[1]])
        else:
            raise Exception(' - ERROR, send_vector: p_offset not understood.')


        p_offset = np.array(p_offset)
        p_v      = np.array(p_v)
        if e_v is None:
            e_v = np.zeros(pos.shape[0])
        else:
            e_v = np.array(e_v)

        assert len(e_v) == len(p_v), ' - ERROR, len(e_v) != len(p_v).'
        
        pos_v = p_offset + p_v
        self.send_pen_up()
        self.send_goto(p_offset[0], p_offset[1])
        self.send_pen_down()
        for e, (x, y) in zip(e_v, pos_v):
            if e == 1:
                self.send_pen_up()
            
            self.send_goto(x, y)
            
            if e == 1:
                self.send_pen_down()

        self.send_pen_up()
        
        return None


    def _plot2cnc_transform(self, p_plot=(0,0)):

        x_plot, y_plot = p_plot
        
        if self.coord_transform is None:
            x_cnc = x_plot
            y_cnc = y_plot
            
        elif self.coord_transform == 'UR':
            W, H = self.paper_size
            x_cnc = W - x_plot
            y_cnc = H - y_plot

        elif self.coord_transform == 'BL':
            x_cnc = -x_plot
            y_cnc = -y_plot
            
        else:
            raise Exception(' - ERROR, Not implemented.')
            
        p_cnc = np.array([x_cnc, y_cnc])
        return p_cnc



    def _cnc2plot_transform(self, p_cnc=(0,0)):

        x_cnc, y_cnc = p_cnc
        
        if self.coord_transform is None:
            x_plot = x_cnc
            y_plot = y_cnc
            
        elif self.coord_transform == 'UR':
            W, H = self.paper_size
            x_plot = W - x_cnc
            y_plot = H - y_cnc

        elif self.coord_transform == 'BL':
            W, H = self.paper_size
            x_plot = -x_cnc
            y_plot = -y_cnc
            
        else:
            raise Exception(' - ERROR, Not implemented.')
            
        p_plot = np.array([x_plot, y_plot])
        return p_plot

    
    def _clip(self, p_cnc=(0,0)):

        if self.coord_transform is None:
            p_clip  = np.array(p_cnc)
            
        elif self.coord_transform == 'UR':
            p_clip = np.array([np.clip(p_cnc[0], 0, self.paper_size[0]),
                               np.clip(p_cnc[1], 0, self.paper_size[1])])

        elif self.coord_transform == 'BL':
            p_clip = np.array([np.clip(p_cnc[0], -self.paper_size[0],0),
                               np.clip(p_cnc[1], -self.paper_size[1],0)])

        else:
            raise Exception(' - ERROR, Not implemented.')
        
        return p_clip 
        

    def send_HW_file(self, filename='cnc_text_bin.pickle', p_offset='TL'):
        with open(filename, 'rb') as f:
            cnc_text_bin = pickle.loads(f.read())

        print(' - Sending file: {}'.format(filename))
        if type() == dict:
            self.send_vector(cnc_text_bin['cnc_generation'][0], cnc_text_bin['cnc_generation'][1], p_offset=p_offset)
        else:
            self.send_vector(cnc_text_bin[0], cnc_text_bin[1], p_offset=p_offset)
            
        return None
    
    
if __name__ == '__main__':
    mqh   = np.array([[0.0, 0.0], [-2.9360128000000714, -0.20971520000011878], [-3.565158399999973, -2.516582400000061], [-2.097152000000051, -6.081740800000034], [1.258291199999917, -8.388607999999977], [4.404019199999993, -9.856614400000126], [9.227468799999997, -9.646899200000007], [14.260633599999892, -7.549747199999956], [19.084083199999895, -3.565158399999973], [22.020095999999967, 1.0485759999999118], [25.58525439999994, 5.452595199999905], [27.892121599999882, 9.227468799999997], [30.61841919999995, 14.88977920000002], [32.92528639999989, 20.971519999999828], [35.65158399999984, 26.42411519999996], [39.426457599999935, 31.037849599999845], [42.36247039999989, 32.92528639999978], [46.766489599999886, 34.60300799999982], [48.86364159999982, 32.50585599999977], [47.60535039999991, 29.569843199999923], [44.45962239999983, 23.06867199999988], [40.89446399999986, 18.035507199999984], [38.79731199999992, 14.47034880000001], [35.65158399999984, 9.856614399999899], [33.973862399999916, 3.984588799999983], [29.779558399999928, -2.097152000000051], [27.472691199999872, -9.017753600000106], [23.9075327999999, -14.47034880000001], [20.13265919999992, -21.181235199999946], [27.682406399999877, -9.017753600000106], [29.989273599999933, -2.3068671999999424], [35.86129919999985, 4.194303999999875], [42.36247039999989, 10.066329600000017], [46.766489599999886, 14.260633599999892], [52.219084799999905, 18.245222399999875], [58.92997119999984, 24.74639359999992], [63.54370559999984, 27.892121599999882], [66.89914879999981, 31.247564799999964], [71.3031679999998, 35.65158399999996], [67.31857919999982, 31.666995199999974], [61.65626879999979, 26.00468479999995], [55.99395839999988, 22.020095999999967], [51.58993919999989, 17.196646399999963], [48.23449599999992, 12.163481599999841], [45.927628799999866, 6.501171200000044], [43.62076159999992, 0.8388608000000204], [40.89446399999986, -4.613734400000112], [39.21674239999993, -9.017753600000106], [37.9584511999999, -13.63148799999999], [37.53902079999989, -18.245222400000102], [40.26531839999984, -19.713228800000024], [44.669337599999835, -17.616076799999973], [48.23449599999992, -14.0509184], [53.05794559999981, -10.695475199999919], [55.889100799999824, -7.864320000000021], [59.55911679999983, -3.984588800000124], [61.4465535999998, -0.20971520000001048], [62.914559999999824, 4.613734399999885], [61.02712319999989, 7.969177599999966], [57.2522495999998, 9.017753599999878], [53.05794559999981, 7.549747199999956], [50.541363199999864, 5.662310400000024], [46.13734399999987, 2.936012799999844], [44.04019199999982, 0.4194304000000102], [41.31389439999987, -3.1457279999999628], [40.47503359999985, -6.501171200000044], [63.54370559999984, -7.969177599999966], [61.44655359999979, -10.066329600000017], [63.12427519999983, -11.53433599999994], [66.6894335999998, -9.227468799999997], [68.57687039999985, -7.130316799999946], [73.81975039999986, -3.984588799999983], [76.1266175999998, -1.0485760000001392], [80.11120639999979, 2.097152000000051], [81.78892799999983, 4.404019199999993], [79.48206079999977, 1.0485759999999118], [76.54604799999981, -3.1457279999999628], [75.28775679999978, -6.9206016000000545], [74.44889599999976, -10.485760000000028], [74.65861119999977, -12.163481600000068], [78.85291519999976, -10.066329600000017], [136.10516479999967, -11.53433599999994], [136.31487999999968, -8.598323200000095], [135.05658879999964, -5.872025600000143], [131.91086079999968, -4.194304000000102], [126.87769599999967, -5.033164800000122], [123.1028223999997, -6.9206016000000545], [119.95709439999973, -9.227468799999997], [117.02108159999966, -12.37319679999996], [118.06965759999969, -15.938355199999933], [119.32794879999972, -18.874368000000004], [122.26396159999967, -19.293798400000014], [127.29712639999968, -18.664652800000113], [131.70114559999968, -16.14807040000005], [137.5731711999997, -13.21205759999998], [140.08975359999965, -9.856614400000126], [142.6063359999996, -5.872025600000143], [140.71889919999967, -9.437184000000116], [137.5731711999997, -14.0509184], [134.84687359999964, -19.084083199999895], [132.5400063999997, -24.117248000000018], [130.86228479999966, -28.94069760000002], [128.5554175999997, -34.183577600000035], [125.82911999999965, -39.63617279999994], [123.5222527999997, -45.088767999999845], [122.26396159999967, -49.70250239999996], [121.63481599999966, -52.42879999999991], [125.19997439999963, -51.58993919999989], [146.3812095999997, -23.278387199999997], [149.10750719999965, -20.552089600000045], [152.2532351999996, -18.035507199999984], [155.39896319999957, -16.357785599999943], [159.17383679999966, -14.0509184], [162.94871039999964, -11.324620800000048], [165.04586239999958, -9.856614400000126], [163.15842559999965, -12.79262719999997], [160.43212799999958, -15.309209600000031], [158.12526079999964, -18.874368000000004], [157.0766847999996, -22.439526399999977], [157.0766847999996, -24.536678400000028], [160.64184319999958, -25.16582399999993], [165.04586239999958, -22.858956799999987], [168.4013055999996, -20.761804799999936], [172.17617919999958, -18.454937599999994], [175.3219071999996, -16.14807040000005], [178.25791999999956, -14.680063999999902], [182.24250879999954, -11.744051200000058], [179.72592639999954, -12.37319679999996], [177.2093439999996, -15.309209600000031], [176.16076799999956, -18.035507199999984], [175.53162239999955, -21.390950400000065], [176.16076799999956, -23.697817600000008], [178.25791999999956, -24.536678400000028], [181.82307839999953, -24.32696319999991], [186.22709759999952, -22.649241600000096], [189.16311039999954, -20.971520000000055], [192.7282687999995, -18.664652800000113], [195.66428159999953, -16.986931200000072], [197.55171839999952, -14.680063999999902], [199.4391551999995, -11.53433599999994], [199.4391551999995, -9.646899200000007], [198.18086399999953, -7.549747199999956], [195.45456639999952, -9.227468799999997], [193.14769919999952, -11.114905599999929], [192.09912319999955, -14.88977920000002], [191.67969279999954, -19.293798400000014], [192.7282687999995, -22.439526399999977], [195.45456639999952, -24.536678400000028], [200.69744639999954, -24.536678400000028], [204.89175039999952, -20.761804799999936], [208.2471935999995, -18.874368000000004], [211.81235199999946, -15.938355199999933], [214.74836479999948, -13.63148799999999], [215.7969407999995, -11.114905599999929], [216.00665599999945, -8.808038399999987], [215.7969407999995, -6.710886399999936], [212.44149759999948, -8.598323200000095], [211.60263679999952, -13.63148799999999], [214.53864959999947, -15.728640000000041], [216.63580159999947, -16.56750080000006], [214.95807999999948, -19.293798400000014], [213.90950399999946, -22.020095999999967], [213.90950399999946, -25.79496960000006], [216.21637119999946, -26.42411519999996], [220.62039039999945, -25.16582399999993], [223.76611839999947, -23.06867199999988], [227.54099199999945, -20.552089600000045], [230.68671999999947, -18.035507199999984], [233.20330239999942, -15.099494399999912], [234.88102399999946, -13.63148799999999], [234.04216319999944, -14.88977920000002], [231.94501119999944, -18.035507199999984], [230.05757439999945, -21.810380800000075], [229.63814399999944, -23.48810239999989], [232.15472639999945, -24.956108800000038], [234.88102399999946, -24.32696319999991], [239.07532799999944, -22.229811200000086], [241.17247999999944, -20.342374399999926], [243.8987775999994, -17.616076799999973], [249.1416575999994, -5.662310400000024], [249.77080319999942, -3.3554432000000816], [247.67365119999943, -2.3068671999999424], [247.25422079999942, -4.404019199999993], [264.4508671999994, -15.728640000000041], [263.61200639999936, -13.63148799999999], [261.72456959999937, -11.324620800000048], [259.8371327999994, -11.324620800000048], [255.22339839999938, -11.53433599999994], [252.70681599999938, -14.47034880000001], [250.39994879999938, -16.986931200000072], [249.3513727999994, -20.761804799999936], [249.56108799999942, -23.697817600000008], [251.2388095999994, -26.00468479999995], [255.8525439999994, -25.37553920000005], [261.30513919999936, -22.858956799999987], [265.0800127999994, -18.874368000000004], [268.22574079999936, -15.728640000000041], [271.1617535999994, -12.163481600000068], [273.46862079999937, -8.388607999999977], [272.42004479999935, -7.969177599999966], [269.48403199999933, -9.646899200000007], [267.59659519999934, -13.002342400000089], [265.91887359999936, -15.518924799999922], [264.03143679999937, -19.503513599999906], [264.2411519999994, -23.06867199999988], [264.4508671999994, -26.42411519999996], [270.11317759999935, -27.472691199999872], [274.93662719999935, -24.956108800000038], [278.0823551999993, -22.649241600000096], [281.43779839999934, -20.342374399999926], [284.5835263999993, -17.406361600000082], [282.6960895999993, -19.293798400000014], [280.3892223999993, -22.858956799999987], [280.1795071999993, -26.84354559999997], [282.2766591999993, -27.472691199999872], [285.4223871999993, -27.05326080000009], [287.7292543999993, -25.37553920000005], [291.5041279999993, -23.06867199999988], [293.8109951999993, -20.451426303999824], [295.55582566399926, -18.035507199999756], [296.36113203199926, -15.485370367999849], [293.6767774719993, -14.008975359999795], [290.1871165439993, -14.948499455999809], [287.3685442559993, -16.02224127999989], [333.8078781439992, -13.472104447999754], [337.7001922559992, -13.069451263999781], [341.18985318399916, -11.056185343999914], [345.4848204799992, -9.57979033599986], [349.51135231999916, -6.895435775999886], [351.9272714239992, -4.882169855999791], [355.28271462399914, -0.5872025599999233], [357.9670691839992, 2.231369728000118], [360.11455283199916, 6.526337023999986], [362.12781875199914, 10.150215680000201], [362.6646896639991, 14.042529792000096], [361.32251238399914, 15.51892480000015], [358.90659327999913, 15.787360256000056], [355.95380326399913, 13.77409433600019], [353.26944870399916, 11.089739775999988], [351.65883596799915, 8.00273203200004], [349.37713459199915, 4.915724288000092], [347.36386867199917, 2.097152000000051], [345.3506027519992, -1.6609443839997766], [343.33733683199915, -4.345298943999978], [340.9214177279992, -8.50604851199978], [339.3108049919992, -11.727273983999794], [337.0291036159992, -15.888023551999822], [334.4789667839992, -20.182990847999918], [333.6736604159992, -21.927821311999878], [331.2577413119992, -26.49122406399988], [329.3786931199992, -31.18884454399972], [331.2577413119992, -27.833401343999867], [334.8816199679992, -24.20952268799988], [339.04236953599917, -19.914555391999784], [342.9346836479992, -17.23020083199981], [346.0216913919992, -15.216934911999942], [347.90073958399915, -15.216934911999942], [349.1086991359992, -15.619588095999916], [348.4376104959992, -18.169724927999823], [346.8269977599992, -21.25673267199977], [344.27686092799917, -25.014829055999826], [343.8742077439992, -28.101836799999774], [345.2163850239992, -28.77292543999988], [348.9744814079992, -27.430748159999894], [351.9272714239992, -26.222788607999746], [355.8195855359991, -23.806869503999906], [359.17502873599915, -22.062039039999945], [362.26203647999915, -19.243466751999904], [364.54373785599915, -17.632854015999783], [366.4227860479991, -15.753805823999755], [364.27530239999913, -17.364418559999876], [361.7251655679991, -20.451426303999824], [359.5776819199991, -22.733127679999825], [358.63815782399917, -25.149046783999893], [359.5776819199991, -28.370272255999907], [361.59094783999916, -28.504489983999747], [365.08060876799914, -27.02809497599992], [368.7044874239991, -24.612175871999852], [371.2546242559991, -22.196256767999785], [374.4758497279991, -20.182990847999918], [378.5023815679991, -16.55911219199993], [381.3209538559991, -13.069451263999781], [382.9315665919991, -11.458838527999887], [385.21326796799906, -8.640266239999846], [386.4212275199991, -6.895435775999886], [385.0790502399991, -8.90870169599998], [383.06578431999907, -12.398362623999901], [379.9787765759991, -16.290676735999796], [377.4286397439991, -20.317208575999757], [373.8047610879991, -25.551699967999866], [370.44931788799914, -30.920409087999815], [368.16761651199914, -36.1549004799997], [365.21482649599915, -41.79204505599978], [362.6646896639991, -46.48966553599985], [360.2487705599991, -50.784632831999716], [357.02754508799916, -57.227083775999745], [354.61162598399915, -61.38783334399977], [351.65883596799915, -65.95123609599977], [348.3033927679992, -71.45416294399979], [345.61903820799915, -74.0042997759997], [344.81373183999915, -75.74913023999966], [341.99515955199917, -76.82287206399974], [340.9214177279992, -75.07804159999978], [342.80046591999917, -71.99103385599983], [344.0084254719992, -69.30667929599963], [346.29012684799915, -66.21967155199968], [348.57182822399915, -62.461575167999854], [350.4508764159992, -59.10613196799977], [351.52461823999914, -56.019124223999825], [353.26944870399916, -53.20055193599978], [354.61162598399915, -49.576673279999795], [357.56441599999914, -45.14748825599986], [359.98033510399915, -42.86578687999986], [364.1410846719991, -38.30238412799986], [367.36231014399914, -35.61802956799988], [371.6572774399991, -32.93367500799991], [375.8180270079991, -30.920409087999815], [380.3814297599991, -28.504489983999747], [383.8710906879991, -27.430748159999894], [387.0923161599991, -26.088570879999907], [389.91088844799907, -25.149046783999893], [388.8371466239991, -27.296530431999827], [387.62918707199907, -29.175578623999854], [385.6159211519991, -32.665239551999775], [385.7501388799991, -34.14163455999983], [388.5687111679991, -33.06789273599975], [390.8504125439991, -30.786191359999748], [392.86367846399907, -28.504489983999747], [393.8032025599991, -23.941087231999745], [391.92415436799905, -22.46469222399992], [389.91088844799907, -20.71986175999973], [387.2265338879991, -19.51190220799981], [425.07593318399904, -16.827547647999836], [424.404844543999, -18.706595839999864], [422.794231807999, -18.035507199999756], [423.196884991999, -16.55911219199993], [424.539062271999, -18.169724927999823], [418.096611327999, -30.65197363199991], [418.23082905599904, -32.128368639999735], [417.291304959999, -33.33632819199988], [416.217563135999, -31.72571545599976], [417.828175871999, -29.44401407999976]])
    mqh_e = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0])

    
    cnc = CNC_controller(coord_transform='BL', verbose=True)
    cnc.connect()

    input(' ENTER para enviar archivo...')
    cnc.send_HW_file(filename='cnc_text_bin.pickle')

    
    
